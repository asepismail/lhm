<?php
class model_s_input_ba extends Model{
    function __construct(){
        parent::__construct();
        $this->load->database();
    } 
    
    function LoadData($periode,$company){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');
        
        $periode = trim($this->db->escape_str($periode));
        $company = trim($this->db->escape_str($company));
        
		$queries ="SELECT s.ID_BA, s.BA_DATE, s.DESCRIPTION, s.QC, s.MILL_MANAGER, s.KTU, s.ADMINISTRATUR, s.LABOR, 	
				   s.COMPANY_CODE, s.FFB_INTI, s.FFB_PLASMA, s.FFB_SUPPLIER, s.FFB_GROUP, s.FFB_PROCESSED, s.BALANCE, 
				   s.BALANCE_YESTERDAY,s.CAGE_WEIGHT, s.PROCESSED_HOUR, s.THROUGHPUT, s.MILL_UTILIZATION, 
				   s.BUAH_MENTAH, s.BUAH_BUSUK, s.JJK, s.TANGKAI, s.BRONDOLAN, s.HOUR_FROM, s.HOUR_TO, s.CBC_FROM, s.CBC_TO, CASE (s.STATUS) WHEN 0 THEN 'WAITING APPROVAL' ELSE 'APPROVED' END AS STATUS
				   FROM s_ba s
				   WHERE s.ACTIVE= 1 AND s.COMPANY_CODE = '".$company."' 
				   AND DATE_FORMAT(s.BA_DATE,'%Y%m')='".$periode."'";
         
        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY ".$sidx." ".$sord." LIMIT ".$start.",".$limit." ";
        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();

        $act = "";
        $no = 1;
		
        foreach($objects as $obj)
        {
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_BA,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->BA_DATE,ENT_QUOTES,'UTF-8')); 
			array_push($cell, htmlentities($obj->DESCRIPTION,ENT_QUOTES,'UTF-8'));			
            array_push($cell, htmlentities($obj->QC,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MILL_MANAGER,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->KTU,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->ADMINISTRATUR,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->LABOR,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_INTI,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_PLASMA,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_SUPPLIER,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_GROUP,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_PROCESSED,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->BALANCE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->BALANCE_YESTERDAY,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->CAGE_WEIGHT,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->PROCESSED_HOUR,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->THROUGHPUT,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MILL_UTILIZATION,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->BUAH_MENTAH,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->BUAH_BUSUK,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->JJK,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->TANGKAI,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->BRONDOLAN,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->HOUR_FROM,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->HOUR_TO,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->CBC_FROM,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->CBC_TO,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->STATUS,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));
            
            $row = new stdClass();

            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      	
        return $jsonObject;
    }

	function update_approval($qc, $mill, $ktu, $adm, $lab, $company){
		$return['status']='';
        $return['error']=false;
		$status=false;
		$isExist=false;
		
		$this->db->select('ID_APPROVAL');
        $this->db->from('s_ba_approval');
        $this->db->where(array('COMPANY_CODE'=>$company));
        
        $sQuery = $this->db->get();
        $count = $sQuery->num_rows();
		
		if ($count==0){
			$isExist == false;
		}else{
			$isExist == true;
		}
		if ($isExist == true){
			$update_sql= "UPDATE s_ba_approval SET QC = '".$qc."', LABOR = '".$lab."', MILL = '".$mill."', KTU = '".$ktu."',
							ADM = '".$adm."' WHERE COMPANY_CODE='".$company."'";
			$status=$this->db->query($update_sql);
		}else{
			$insert_sql= "INSERT INTO s_ba_approval (QC, LABOR, MILL, KTU, ADM, COMPANY_CODE) VALUES ('".$qc."', '".$lab."', '".$mill."', '".$ktu."', '".$adm."', '".$company."')";
			$status=$this->db->query($insert_sql);	
		}
		
		if($status == false){
			$return['status']=$this->db->_error_message();
			$return['error']=true;
		}else{
			$return['status']="Update Data Berhasil"."\n";
			$return['error']=false;
		} 
		return $return;
	}
	function get_approval($company){
        $company=htmlentities($this->db->escape_str($company),ENT_QUOTES,'UTF-8');
         
        $query = $this->db->query("SELECT * FROM s_ba_approval a
WHERE a.COMPANY_CODE = '".$company."'");
		
		return $query->result_array();
    }
	
	function LoadDetail_Production($company,$id_ba){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');

        $id_ba=trim($this->db->escape_str($id_ba));
        $company=trim($this->db->escape_str($company)); 
         
        $queries = "SELECT p.ID_COMMODITY, k.JENIS, p.COMPANY_CODE, p.ID_PRODUCTION, p.WEIGHT, p.FFA, p.MOISTURE, p.DIRT
					FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS
					WHERE p.ID_BA ='".$id_ba."' AND p.COMPANY_CODE ='".$company."' AND p.ACTIVE = 1";

        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY ".$sidx." ".$sord." LIMIT ".$start.",".$limit." ";

        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();
        $act = "";
        $no = 1;
        foreach($objects as $obj){
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_COMMODITY,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->JENIS,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->ID_PRODUCTION,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->WEIGHT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->FFA,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MOISTURE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->DIRT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));
                  
            $row = new stdClass();
            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    }
	
	function LoadDetail_Dispatch($company,$id_ba){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');

        $id_ba=trim($this->db->escape_str($id_ba));
        $company=trim($this->db->escape_str($company)); 
         
        $queries = "SELECT d.ID_COMMODITY, k.JENIS, d.COMPANY_CODE, d.ID_DISPATCH, 
					d.WEIGHT, d.FFA, d.MOISTURE, d.DIRT
					FROM s_ba_dispatch d
					LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS
					WHERE d.ID_BA ='".$id_ba."' AND d.COMPANY_CODE ='".$company."' AND d.ACTIVE = 1";

        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY ".$sidx." ".$sord." LIMIT ".$start.",".$limit." ";

        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();
        $act = "";
        $no = 1;
        foreach($objects as $obj){
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_COMMODITY,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->JENIS,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->ID_DISPATCH,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->WEIGHT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->FFA,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MOISTURE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->DIRT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));
                  
            $row = new stdClass();
            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    }
	
	function LoadDetail_Stock($company,$id_ba){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');

        $id_ba=trim($this->db->escape_str($id_ba));
        $company=trim($this->db->escape_str($company)); 
         
        $queries = "SELECT s.ID_COMMODITY, k.JENIS, s.COMPANY_CODE, s.ID_STOCK, 
					s.WEIGHT, s.FFA, s.MOISTURE, s.DIRT
					FROM s_ba_stock s
					LEFT JOIN s_komoditas k ON s.ID_COMMODITY = k.ID_KOMODITAS
					WHERE s.ID_BA ='".$id_ba."' AND s.COMPANY_CODE ='".$company."' AND s.ACTIVE = 1";

        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY ".$sidx." ".$sord." LIMIT ".$start.",".$limit." ";

        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();
        $act = "";
        $no = 1;
        foreach($objects as $obj){
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_COMMODITY,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->JENIS,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->ID_STOCK,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->WEIGHT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->FFA,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MOISTURE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->DIRT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));
                  
            $row = new stdClass();
            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    }
	
	function LoadDetail_StorageStock($company, $id_ba){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');

        $id_ba=trim($this->db->escape_str($id_ba));
        $company=trim($this->db->escape_str($company)); 
         
        $queries = "SELECT ss.ID_STORAGE, s.PRODUCT_CODE, ss.COMPANY_CODE, ss.ID_STRG_STOCK, 
					ss.WEIGHT, ss.FFA, ss.MOISTURE, ss.DIRT
					FROM s_ba_storage_stock ss
					LEFT JOIN m_storage s ON ss.ID_STORAGE = s.ID_STORAGE
					WHERE ss.ID_BA ='".$id_ba."' AND ss.COMPANY_CODE ='".$company."' AND ss.ACTIVE = 1";

        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY ".$sidx." ".$sord." LIMIT ".$start.",".$limit." ";

        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();
        $act = "";
        $no = 1;
        foreach($objects as $obj){
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_STORAGE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->PRODUCT_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->ID_STRG_STOCK,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->WEIGHT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->FFA,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MOISTURE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->DIRT,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));
                  
            $row = new stdClass();
            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    }
	
	function LoadData_Storage($company){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');

        $company = trim($this->db->escape_str($company));
		$queries="SELECT s.ID_STORAGE, s.PRODUCT_CODE, s.COMPANY_CODE FROM m_storage s
WHERE s.ACTIVE= 1 AND s.COMPANY_CODE = '".$company."'";
		
        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY "."ID_STORAGE"." ".$sord." LIMIT ".$start.",".$limit." ";
		
        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();

        $act = "";
        $no = 1; 
        foreach($objects as $obj)
        {
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_STORAGE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->PRODUCT_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));                
            $row = new stdClass();

            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    } 
	
	function LoadData_OtherStock($company){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');

        $company = trim($this->db->escape_str($company));

		$queries="SELECT k.ID_KOMODITAS AS ID_COMMODITY , k.JENIS AS COMMODITY, k.COMPANY_CODE FROM s_komoditas k
					WHERE k.ACTIVE=1
					AND k.COMPANY_CODE ='".$company."' 
					AND k.KODE_JENIS IN ('TNK', 'CKG', 'ABJ')";

        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY "."ID_KOMODITAS"." ".$sord." LIMIT ".$start.",".$limit." ";
		
        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();

        $act = "";
        $no = 1; 
        foreach($objects as $obj)
        {
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_COMMODITY,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->COMMODITY,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));                
            $row = new stdClass();

            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    } 
	
    function LoadData_Commodity($company){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');

        $company = trim($this->db->escape_str($company));
		
		$queries="SELECT k.ID_KOMODITAS AS ID_COMMODITY , k.JENIS AS COMMODITY, k.COMPANY_CODE FROM s_komoditas k
					WHERE k.ACTIVE=1
					AND k.COMPANY_CODE ='".$company."' 
					AND k.KODE_JENIS IN ('CPO', 'KRN', 'TNK', 'CKG', 'ABJ')";
					
        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY "."ID_KOMODITAS"." ".$sord." LIMIT ".$start.",".$limit." ";
		
        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();

        $act = "";
        $no = 1; 
        foreach($objects as $obj)
        {
            $cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_COMMODITY,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->COMMODITY,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));                
            $row = new stdClass();

            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    } 
	
    function data_search($data_search,$company){
        $limit = htmlentities($this->input->post('rows'),ENT_QUOTES,'UTF-8');
        $page = htmlentities($this->input->post('page'),ENT_QUOTES,'UTF-8');
        $sidx = htmlentities($this->input->post('sidx'),ENT_QUOTES,'UTF-8');
        $sord = htmlentities($this->input->post('sord'),ENT_QUOTES,'UTF-8');
        
        $company = trim($this->db->escape_str($company));
        $where = "WHERE ACTIVE=1 AND COMPANY_CODE = '".$company."' "; 
        $where_cnt = sizeof($data_search);
        $i=0;
        for($i==0; $i<=$where_cnt-1; $i++){
            switch(strtolower(trim($data_search[$i]['op']))){
                case "bw":
                    $operator = "LIKE";
                    break;
                case "eq":
                    $operator = "=";
                    break;
                case "ne":
                    $operator = "!=";
                    break;
                case "lt":
                    $operator = "<";
                    break;
                case "le":
                    $operator = "<=";
                    break;
                case "gt":
                    $operator = ">";
                    break;
                case "ge":
                    $operator = ">=";
                    break;
                case "ew":
                    $operator ="LIKE";
                    break;
                case "cn":
                    $operator ="LIKE";
                    break;
                default:
                    $operator ="LIKE";    
            }
            
            if(trim(strtoupper($operator))== "LIKE" && !empty($operator)){
                $where .=" AND ".trim($this->db->escape_str($data_search[$i]['field']))." $operator '%".trim($this->db->escape_like_str($data_search[$i]['data']))."%'";   
            }else{
               $where .=" AND ".trim($this->db->escape_str($data_search[$i]['field']))." $operator '".trim($this->db->escape_str($data_search[$i]['data']))."'"; 
            }           
        }
        $queries ="SELECT * FROM s_ba ".$where;
            
        $sql2 = $queries;
       
        if(!$sidx) $sidx =1;
        $query = $this->db->query($sql2);
        $count = $query->num_rows(); 

        if( $count >0 ) {
            $total_pages = @(ceil($count/$limit));
        } else {
            $total_pages = 0;
        }
        if ($page > $total_pages)
            $page=$total_pages;
            
        $start = $limit * $page - $limit;
        if ($start > 0 ){
            $start = $start;
        } else {
            $start = 0;
        }
        
        $sql = $queries." ORDER BY ".$sidx." ".$sord." LIMIT ".$start.",".$limit." ";                                                      
        $objects = $this->db->query($sql,FALSE)->result(); 
        $rows =  array();

        $act = "";
        $no = 1;
        foreach($objects as $obj)
        {
			$cell = array();
            array_push($cell, $no);
            array_push($cell, htmlentities($obj->ID_BA,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($obj->BA_DATE,ENT_QUOTES,'UTF-8')); 
			array_push($cell, htmlentities($obj->DESCRIPTION,ENT_QUOTES,'UTF-8'));			
            array_push($cell, htmlentities($obj->QC,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MILL_MANAGER,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->KTU,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->ADMINISTRATUR,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->LABOR,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->COMPANY_CODE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_INTI,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_PLASMA,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_SUPPLIER,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_GROUP,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->FFB_PROCESSED,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->BALANCE,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->BALANCE_YESTERDAY,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->CAGE_WEIGHT,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->PROCESSED_HOUR,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->THROUGHPUT,ENT_QUOTES,'UTF-8'));
			array_push($cell, htmlentities($obj->MILL_UTILIZATION,ENT_QUOTES,'UTF-8'));
            array_push($cell, htmlentities($act,ENT_QUOTES,'UTF-8'));
            
            $row = new stdClass();

            $row->id = $cell[0];
            $row->cell = $cell;
            array_push($rows, $row);
            $no++;
        }

        $jsonObject = new stdClass();
        $jsonObject->page =  $page;
        $jsonObject->total = $total_pages;
        $jsonObject->records = $count;
        $jsonObject->rows = $rows;      

        return $jsonObject;
    }
	
    function add_new($company, $data_post){
		$return['status']='';
        $return['error']=false;
        $company = trim($this->db->escape_str($company));
        
        if(empty($company)) {
            $status = "COMPANY_CODE CANNOT BE NULL !!";
			$return['status']=$status;
        	$return['error']=true;
        }
        
        $cek_data_exist = $this->cek_data_exist('s_ba',
                    array('ID_BA'=>$data_post['ID_BA'],'BA_DATE'=>$data_post['BA_DATE'],'COMPANY_CODE'=>$company),'ID_BA');
        if ($cek_data_exist > 0){
            $status='Data Input ID telah ada di database';
			$return['status']=$status;
        	$return['error']=true;
        }
        
        unset($cek_data_exist);
        $cek_data_exist = $this->cek_data_exist('s_ba',array('BA_DATE'=>$data_post['BA_DATE'],'COMPANY_CODE'=>$company, 'ACTIVE'=>1),'ID_BA');
        if ($cek_data_exist > 0){
            $status="Berita acara tanggal " .$data_post['BA_DATE']." telah diinput";
			$return['status']=$status;
        	$return['error']=true;
        }

        if(empty($status) || $status==FALSE){			
            $this->db->insert( 's_ba', $data_post );
                    
            if($this->db->trans_status() == FALSE){
                $status = $this->db->_error_message();//"Error in Transactions!!";
				$return['status']=$status;
        		$return['error']=true;
            }else{
                $status="Insert berita acara berhasil";   
				$return['status']=$status;
	        	$return['error']=false;
            }
        }
        return $return;
    }
	
	function add_new_production($id, $company, $data_post){
		$return['status']='';
        $return['error']=false;
        if(isset($id) && isset($company)){
        	foreach($data_post as $keys => $vals){
            	$this->db->insert( 's_ba_production', $data_post[$keys] );                                 
            }
            if($this->db->trans_status() == FALSE){
				$return['status']=$this->db->_error_message();
        		$return['error']=true;
           	}else{
				$return['status']="Insert Data Berhasil"."\n";
        		$return['error']=false;
           	} 
        }else{
            $return['status']="data tidak lengkap"."\n";
        	$return['error']=true;
        }
        return $return;
    }
	
	function add_new_quality($id, $company, $data_post){
		$return['status']='';
        $return['error']=false;
        if(isset($id) && isset($company)){
        	foreach($data_post as $keys => $vals){
            	$this->db->insert( 's_ba_quality', $data_post[$keys] );                                 
            }
            if($this->db->trans_status() === FALSE){
				$return['status']=$this->db->_error_message();
        		$return['error']=true;
           	}else{
				$return['status']="Insert Data Berhasil"."\n";
        		$return['error']=false;
           	} 
        }else{
            $return['status']="data tidak lengkap"."\n";
        	$return['error']=true;
        }
        return $return;
    }
    
	function add_new_stock($id, $company, $data_post){
		$return['status']='';
        $return['error']=false;
        if(isset($id) && isset($company)){
        	foreach($data_post as $keys => $vals){
            	$this->db->insert( 's_ba_stock', $data_post[$keys] );                                 
            }
            if($this->db->trans_status() == FALSE){
				$return['status']=$this->db->_error_message();
        		$return['error']=true;
           	}else{
				$return['status']="Insert Data Berhasil"."\n";
        		$return['error']=false;
           	} 
        }else{
            $return['status']="data tidak lengkap"."\n";
        	$return['error']=true;
        }
        return $return;
    }
	
	function add_new_storage_stock($id, $company, $data_post){
		$return['status']='';
        $return['error']=false;
        if(isset($id) && isset($company)){
        	foreach($data_post as $keys => $vals){
            	$this->db->insert( 's_ba_storage_stock', $data_post[$keys] );                                 
            }
            if($this->db->trans_status() == FALSE){
				$return['status']=$this->db->_error_message();
        		$return['error']=true;
           	}else{
				$return['status']="Insert Data Berhasil"."\n";
        		$return['error']=false;
           	} 
        }else{
            $return['status']="data tidak lengkap"."\n";
        	$return['error']=true;
        }
        return $return;
    }
	
	function add_new_dispatch($id, $company, $data_post){
		$return['status']='';
        $return['error']=false;
        if(isset($id) && isset($company)){
        	foreach($data_post as $keys => $vals){
            	$this->db->insert( 's_ba_dispatch', $data_post[$keys] );                                 
            }
            if($this->db->trans_status() == FALSE){
				$return['status']=$this->db->_error_message();
        		$return['error']=true;
           	}else{
				$return['status']="Insert Data Berhasil"."\n";
        		$return['error']=false;
           	} 
        }else{
            $return['status']="data tidak lengkap"."\n";
        	$return['error']=true;
        }
        return $return;
    }
	
	function update_data($id, $company, $data){
		$return['status']='';
        $return['error']=false;
        $id = trim($this->db->escape_str($id));
        $company = trim($this->db->escape_str($company));
		
        $notastatus='0';
        $qCekStatus= "SELECT STATUS FROM s_ba WHERE ID_BA='".$id."'";
        $cek_ba_status=$this->db->query($qCekStatus);
        if($cek_ba_status->num_rows() > 0){
            $row_data = $cek_ba_status->row();
            $ba_status=$row_data->STATUS; 
        }
        

		if($notastatus==0){
       		$this->db->where('ID_BA',$id);
          	$this->db->where('COMPANY_CODE',$company);
           	$this->db->update('s_ba', $data );
         	if($this->db->trans_status() == FALSE){
            	$status = $this->db->_error_message();//"Error in Transactions!!";
				$return['status']=$status;
        		$return['error']=true;
          	}else{
            	$status="Update Data ID Berhasil"."\n";
				$return['status']=$status;
        		$return['error']=false;
          	}        
      	}else{
       		$status="Data sudah di approve tidak dapat di update"."\n"; 
			$return['status']=$status;
        	$return['error']=true;
       	}      

		return $return;
    }
	
	function update_production($id,$company,$data){
		$return['status']='';
        $return['error']=false;
        $id = trim($this->db->escape_str($id));
        $company = trim($this->db->escape_str($company));
        
        if(empty($id)){
            $status = "ID NOTA CANNOT BE NULL !!";
			$return['status']=$status;
        	$return['error']=true;
        }
                
        if(empty($company)) {
            $status = "COMPANY_CODE CANNOT BE NULL !!";
			$return['status']=$status;
        	$return['error']=true;
        }
        
		if(empty($return['status']) && $return['error'] == false){  
			$notastatus='0';
        	$qCekStatus= "SELECT STATUS FROM s_ba WHERE ID_BA='".$id."'";
        	$cek_ba_status=$this->db->query($qCekStatus);
        	if($cek_ba_status->num_rows() > 0){
            	$row_data = $cek_ba_status->row();
            	$ba_status=$row_data->STATUS; 
        	}
        
            if($ba_status!=1){
                $this->db->where('ID_BA', $id );      
                $this->db->delete('s_ba_production');  
                foreach($data as $keys => $vals){
               		$this->db->insert( 's_ba_production', $data[$keys] );                                 
             	}
              	if($this->db->trans_status() == FALSE){
                	$status = $this->db->_error_message();//"Error in Transactions!!";
               	}else{
                   	$status="Update data berhasil"."\n";  
					$return['status']=$status;
        			$return['error']=false;
                }    
            }else{
                $status="Data tidak dapat di Update"."\n";  
				$return['status']=$status;
        		$return['error']=true;
            }   
        }   
		return $return; 
    }
	
	function update_dispatch($id,$company,$data){
		$return['status']='';
        $return['error']=false;
        $id = trim($this->db->escape_str($id));
        $company = trim($this->db->escape_str($company));
        
        if(empty($id)){
            $status = "ID NOTA CANNOT BE NULL !!";
			$return['status']=$status;
        	$return['error']=true;
        }
                
        if(empty($company)) {
            $status = "COMPANY_CODE CANNOT BE NULL !!";
			$return['status']=$status;
        	$return['error']=true;
        }
        
		if(empty($return['status']) && $return['error'] == false){  
			$notastatus='0';
        	$qCekStatus= "SELECT STATUS FROM s_ba WHERE ID_BA='".$id."'";
        	$cek_ba_status=$this->db->query($qCekStatus);
        	if($cek_ba_status->num_rows() > 0){
            	$row_data = $cek_ba_status->row();
            	$ba_status=$row_data->STATUS; 
        	}
        
            if($ba_status!=1){
                $this->db->where('ID_BA', $id );      
                $this->db->delete('s_ba_dispatch');  
                foreach($data as $keys => $vals){
               		$this->db->insert('s_ba_dispatch', $data[$keys] );                                 
             	}
              	if($this->db->trans_status() == FALSE){
                	$status = $this->db->_error_message();//"Error in Transactions!!";
               	}else{
                   	$status="Update data berhasil"."\n";  
					$return['status']=$status;
        			$return['error']=false;
                }    
            }else{
                $status="Data tidak dapat di Update"."\n";  
				$return['status']=$status;
        		$return['error']=true;
            }   
        }   
		return $return; 
    }
	
	function update_stock($id,$company,$data){
		$return['status']='';
        $return['error']=false;
        $id = trim($this->db->escape_str($id));
        $company = trim($this->db->escape_str($company));
        
        if(empty($id)){
            $status = "ID NOTA CANNOT BE NULL !!";
			$return['status']=$status;
        	$return['error']=true;
        }
                
        if(empty($company)) {
            $status = "COMPANY_CODE CANNOT BE NULL !!";
			$return['status']=$status;
        	$return['error']=true;
        }
        
		if(empty($return['status']) && $return['error'] == false){  
			$notastatus='0';
        	$qCekStatus= "SELECT STATUS FROM s_ba WHERE ID_BA='".$id."'";
        	$cek_ba_status=$this->db->query($qCekStatus);
        	if($cek_ba_status->num_rows() > 0){
            	$row_data = $cek_ba_status->row();
            	$ba_status=$row_data->STATUS; 
        	}
        
            if($ba_status!=1){
                $this->db->where('ID_BA', $id );      
                $this->db->delete('s_ba_stock');  
                foreach($data as $keys => $vals){
               		$this->db->insert('s_ba_stock', $data[$keys] );                                 
             	}
              	if($this->db->trans_status() == FALSE){
                	$status = $this->db->_error_message();//"Error in Transactions!!";
               	}else{
                   	$status="Update data berhasil"."\n";  
					$return['status']=$status;
        			$return['error']=false;
                }    
            }else{
                $status="Data tidak dapat di Update"."\n";  
				$return['status']=$status;
        		$return['error']=true;
            }   
        }   
		return $return; 
    }
	
	function update_storage_stock($id,$company,$data){
		$return['status']='';
        $return['error']=false;
        $id = trim($this->db->escape_str($id));
        $company = trim($this->db->escape_str($company));
        
        if(empty($id)){
            $status = "ID NOTA CANNOT BE NULL!";
			$return['status']=$status;
        	$return['error']=true;
        }
                
        if(empty($company)) {
            $status = "COMPANY_CODE CANNOT BE NULL!";
			$return['status']=$status;
        	$return['error']=true;
        }
        
		if(empty($return['status']) && $return['error'] == false){  
			$notastatus='0';
        	$qCekStatus= "SELECT STATUS FROM s_ba WHERE ID_BA='".$id."'";
        	$cek_ba_status=$this->db->query($qCekStatus);
        	if($cek_ba_status->num_rows() > 0){
            	$row_data = $cek_ba_status->row();
            	$ba_status=$row_data->STATUS; 
        	}
        
            if($ba_status!=1){
                $this->db->where('ID_BA', $id );      
                $this->db->delete('s_ba_storage_stock');  
                foreach($data as $keys => $vals){
               		$this->db->insert('s_ba_storage_stock', $data[$keys] );                                 
             	}
              	if($this->db->trans_status() == FALSE){
                	$status = $this->db->_error_message();//"Error in Transactions!!";
               	}else{
                   	$status="Update data berhasil"."\n";  
					$return['status']=$status;
        			$return['error']=false;
                }    
            }else{
                $status="Data tidak dapat di Update"."\n";  
				$return['status']=$status;
        		$return['error']=true;
            }   
        }   
		return $return; 
    }
		
    function cek_data_exist($tableName,$where_condition,$select_condition){
        $this->db->select($select_condition);
        $this->db->from($tableName);
        $this->db->where($where_condition);
        
        $sQuery = $this->db->get();
        $count = $sQuery->num_rows();
           
        return $count;
    } 
	
	//start: reporting code
	function get_dispatch_doc($date_dispatch,$company){
		$date_dispatch = trim($this->db->escape_str($date_dispatch));
		
		$body ="SELECT doo.ID_DO, k.JENIS, doo.QTY_CONTRACT, dispatch.QTY_DELIVERED_RUN, (doo.QTY_CONTRACT -dispatch.QTY_DELIVERED_RUN) AS BALANCE
			FROM s_dispatch_do doo
			LEFT JOIN (
				SELECT  d.ID_DO, MAX(d.QTY_DELIVERED_RUN) AS QTY_DELIVERED_RUN, d.ID_KOMODITAS, d.TANGGALM
				FROM s_dispatch d
				WHERE DATE_FORMAT(d.TANGGALM ,'%Y%m%d') = DATE_FORMAT('".$date_dispatch."','%Y%m%d') 
				AND d.COMPANY_CODE='".$company."'
				AND d.ACTIVE=1
				GROUP BY d.ID_DO
			) dispatch ON doo.ID_DO = dispatch.ID_DO
			LEFT JOIN s_komoditas k ON dispatch.ID_KOMODITAS = k.ID_KOMODITAS
			WHERE DATE_FORMAT(dispatch.TANGGALM ,'%Y%m%d') = DATE_FORMAT('".$date_dispatch."','%Y%m%d') ";

		$sQuery = $this->db->query($body);
		$rowcount = $sQuery->num_rows();
		
		$temp_result = array();
        if(!empty($rowcount)){
            foreach ( $sQuery->result_array() as $row )
            {
                $temp_result[] = $row;
            }
        }
        return $temp_result;
	}
	
	function get_ffb_actual($dates){
		$query="SELECT * FROM s_ba ba WHERE ba.BA_DATE ='".$dates."' AND ba.ACTIVE =1";

        $sQuery = $this->db->query($query);
        $row=array();
        if($sQuery->num_rows() > 0){
            $row = $sQuery->row();    
        }else{
			$row=NULL;	
		}
        return $row;  
    }
	
	function get_ffb_period($date, $date_to, $company){
		$query="SELECT SUM(ba.FFB_INTI) AS FFB_INTI, SUM(ba.FFB_PLASMA) AS FFB_PLASMA, SUM(ba.FFB_SUPPLIER) AS FFB_SUPPLIER, 
SUM(ba.FFB_GROUP) AS FFB_GROUP, SUM(ba.FFB_PROCESSED) AS FFB_PROCESSED, SUM(ba.PROCESSED_HOUR) AS PROCESSED_HOUR
FROM s_ba ba 
WHERE ba.ACTIVE =1 AND ba.COMPANY_CODE='".$company."'
AND DATE_FORMAT(ba.BA_DATE ,'%Y%m%d') BETWEEN DATE_FORMAT('".$date."','%Y%m%d') AND DATE_FORMAT('".$date_to."','%Y%m%d') 
";

        $sQuery = $this->db->query($query);
        $row=array();
		$row = NULL;
        if($sQuery->num_rows() > 0){
            $row = $sQuery->row();   
        }
        return $row;  
    }
	function get_ffa_period($date, $date_to, $company, $commodity_type){
		$query="SELECT FFA FROM s_ba_production p
INNER JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS
where p.COMPANY_CODE = '".$company."' AND p.ACTIVE=1
AND p.PRODUCTION_DATE BETWEEN DATE_FORMAT('".$date."','%Y%m%d') AND DATE_FORMAT('".$date_to."','%Y%m%d') AND k.KODE_JENIS = '".$commodity_type."'";	

		$sQuery = $this->db->query($query);
		if($sQuery->num_rows() > 0){
			$row = $sQuery->row(); 
		}else{
			$row=NULL;	
		}
		return $row;
	}
	function get_prod_period($date, $date_to, $company, $commodity_type){
		$query="SELECT SUM(p.WEIGHT) AS WEIGHT FROM s_ba_production p
INNER JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS
WHERE p.COMPANY_CODE='".$company."' AND p.ACTIVE=1 AND k.KODE_JENIS IN ('".$commodity_type."') 
AND DATE_FORMAT(p.PRODUCTION_DATE ,'%Y%m%d') BETWEEN DATE_FORMAT('".$date."','%Y%m%d') AND DATE_FORMAT('".$date_to."','%Y%m%d')";
		
        $sQuery = $this->db->query($query);
        $value='';
        if($sQuery->num_rows() > 0){
            $row = $sQuery->row();  
			$value = $row->WEIGHT; 
        }
        return $value;  
    }
	
	function get_production($id, $company, $commodity_type){
		$query="SELECT p.ID_BA, p.PRODUCTION_DATE, p.ID_COMMODITY, p.WEIGHT, p.FFA, p.MOISTURE, p.DIRT, 
k.KODE_JENIS FROM s_ba_production p
INNER JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS
WHERE p.ID_BA = '".$id."'  AND p.COMPANY_CODE='".$company."' AND p.ACTIVE=1 AND k.KODE_JENIS IN ('".$commodity_type."')";
		
        $sQuery = $this->db->query($query);
        $row=array();
        if($sQuery==true){
            $row = $sQuery->row();   
        }else{
			$row=NULL;
		}
        return $row;  
    }
	
	function get_despatch($id, $company, $commodity_type){
		$query="SELECT d.ID_BA, d.DISPATCH_DATE, d.ID_COMMODITY, d.WEIGHT, d.FFA, d.MOISTURE, d.DIRT, 
 k.KODE_JENIS
FROM s_ba_dispatch d
INNER JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS
WHERE d.ID_BA = '".$id."' AND d.ACTIVE=1 AND d.COMPANY_CODE='".$company."' AND k.KODE_JENIS IN ('".$commodity_type."')";
		
        $sQuery = $this->db->query($query);
        $row=array();
        if($sQuery==true){
            $row = $sQuery->row();   
        }else{
			$row=NULL;
		}
        return $row;  
    }
	
	function get_dispatch_period($date, $date_to, $company, $commodity_type){
		$query="SELECT SUM(d.WEIGHT) AS WEIGHT FROM s_ba_dispatch d
INNER JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS
WHERE d.COMPANY_CODE='".$company."' AND d.ACTIVE=1 AND k.KODE_JENIS IN ('".$commodity_type."') 
AND DATE_FORMAT(d.DISPATCH_DATE ,'%Y%m%d') BETWEEN DATE_FORMAT('".$date."','%Y%m%d') AND DATE_FORMAT('".$date_to."','%Y%m%d')";
		
        $sQuery = $this->db->query($query);
        $value='';
        if($sQuery==true){
            $row = $sQuery->row();  
			$value = $row->WEIGHT; 
        }
        return $value;  
    }
	
	function get_stock($id, $company, $commodity_type){
		$query="SELECT d.ID_BA, d.STOCK_DATE, d.ID_COMMODITY, d.WEIGHT, d.FFA, d.MOISTURE, d.DIRT, 
 k.KODE_JENIS
FROM s_ba_stock d
INNER JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS
WHERE d.ID_BA = '".$id."'  AND d.ACTIVE=1 AND d.COMPANY_CODE='".$company."' AND k.KODE_JENIS IN ('".$commodity_type."')";
		
        $sQuery = $this->db->query($query);
        $row=array();
        if($sQuery==true){
            $row = $sQuery->row();   
        }else{
			$row=NULL;
		}
        return $row;  
    }
	
	function get_storage_stock($id, $company, $commodity_type, $storage_num){
		$query="SELECT d.ID_BA, d.STRG_STOCK_DATE, d.ID_STORAGE, d.WEIGHT, d.FFA, d.MOISTURE, d.DIRT, 
 k.PRODUCT_CODE
FROM s_ba_storage_stock d
INNER JOIN m_storage k ON d.ID_STORAGE = k.ID_STORAGE
WHERE d.ID_BA = '".$id."'  AND d.ACTIVE=1 AND d.COMPANY_CODE='".$company."' AND k.PRODUCT_CODE IN ('".$commodity_type."') AND SUBSTRING(d.ID_STORAGE,-1)=".$storage_num."";
		
        $sQuery = $this->db->query($query);
        $row=array();
        if($sQuery==true){
            $row = $sQuery->row();   
        }else{
			$row = NULL;
		}
        return $row;  
    }
	
	function get_sounding_cpo($periode, $company, $commodity_type, $storage_num){
		$query="SELECT s.DATE, s.HEIGHT, s.TEMPERATURE, s.VOLUME, s.WEIGHT FROM s_sounding s
INNER JOIN m_storage k ON s.ID_STORAGE = k.ID_STORAGE
WHERE s.ACTIVE=1 AND s.COMPANY_CODE='".$company."' 
AND k.PRODUCT_CODE IN ('".$commodity_type."') AND SUBSTRING(s.ID_STORAGE,-1)=".$storage_num."
AND s.DATE = '".$periode."'";
		
        $sQuery = $this->db->query($query);
        $row=array();
        if($sQuery==true){
            $row = $sQuery->row();   
        }
        return $row;  
    }
	
	function get_sounding_kernel($periode, $company, $commodity_type, $storage_num){
		$query="SELECT s.DATE, s.HEIGHT, s.WEIGHT FROM s_sounding_kernel s
INNER JOIN m_storage k ON s.ID_STORAGE = k.ID_STORAGE
WHERE s.ACTIVE=1 AND s.COMPANY_CODE='".$company."' 
AND k.PRODUCT_CODE IN ('".$commodity_type."') AND SUBSTRING(s.ID_STORAGE,-1)=".$storage_num."
AND s.DATE = '".$periode."'";
		
        $sQuery = $this->db->query($query);
        $row=array();
        if($sQuery==true){
            $row = $sQuery->row();   
        }else{
			$row = NULL;
		}
        return $row;  
    }
	
	function delete_ba($id_ba,$company){
        $id_ba = trim($this->db->escape_str($id_ba));
        $company = trim($this->db->escape_str($company));
        $status=FALSE;
        
        if(empty($id_ba)){
            $status = "id_ba CANNOT BE NULL !!";
        }
        
        if(empty($company)) {
            $status = "COMPANY_CODE CANNOT BE NULL !!";
        }
        
        $cek_data_exist = $this->cek_data_exist('s_ba',array('ID_BA'=>$id_ba),'ID_BA');
        if ($cek_data_exist <= 0){
            $status ="DATA NOT EXIST !!";
        }
        
        if(empty($status) || $status==FALSE){
            
            $this->db->where('ID_BA',$id_ba);
            $this->db->where('COMPANY_CODE',$company);
            $set = array('UPDATE_BY'=>trim(htmlentities($this->session->userdata('LOGINID'),ENT_QUOTES,'UTF-8')),
                    'UPDATE_TIME' =>  $this->global_func->gen_datetime(),
                    'ACTIVE'=>0
                    );
            $this->db->set($set);
            $this->db->update( 's_ba');
            if($this->db->trans_status() == FALSE){
                $status = $this->db->_error_message();//"Error in Transactions!!";
            }else{
				//start: delete production
				$this->db->where('ID_BA',$id_ba);
            	$this->db->where('COMPANY_CODE',$company);
             	$this->db->set($set);
            	$this->db->update('s_ba_production');
				//end: delete production
				//start: delete dispatch
				$this->db->where('ID_BA',$id_ba);
            	$this->db->where('COMPANY_CODE',$company);
            	$this->db->set($set);
            	$this->db->update('s_ba_dispatch');
				//end: delete dispatch
				//start: delete dispatch
				$this->db->where('ID_BA',$id_ba);
            	$this->db->where('COMPANY_CODE',$company);
            	$this->db->set($set);
            	$this->db->update('s_ba_storage_stock');
				//end: delete dispatch
				//start: delete dispatch
				$this->db->where('ID_BA',$id_ba);
            	$this->db->where('COMPANY_CODE',$company);
            	$this->db->set($set);
            	$this->db->update('s_ba_stock');
				//end: delete dispatch
                $status="Delete Data ID Berhasil"."\n";   
            }
        }
        
        return $status;
    } 
	
	function get_data_ba($company, $period, $f_day){
		$query="SELECT ba.BA_DATE, (ba.FFB_INTI+ ba.FFB_PLASMA + ba.FFB_SUPPLIER + ba.FFB_GROUP ) AS FFB, 
		(SELECT SUM(b.FFB_INTI) + SUM(b.FFB_PLASMA) + SUM(b.FFB_SUPPLIER) + SUM(b.FFB_GROUP) AS FFB_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS FFB_SHI,
ba.FFB_PROCESSED, 
(SELECT SUM(b.FFB_PROCESSED) AS FFB_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS FFB_PROCESSED_SHI, ((ba.BALANCE_YESTERDAY + ba.FFB_INTI+ ba.FFB_PLASMA + ba.FFB_SUPPLIER + ba.FFB_GROUP ) - ba.FFB_PROCESSED) AS BALANCE_YESTERDAY, PROD_CPO.WEIGHT AS CPO_PROD, 
(SELECT SUM(p.WEIGHT) FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND p.PRODUCTION_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND p.COMPANY_CODE='".$company."') AS CPO_PROD_SHI, 0 AS ER_CPO,
0 AS ER_CPO_SHI, PROD_CPO.FFA AS FFA_PROD, (STOCK_CPO1.WEIGHT*STOCK_CPO1.FFA+STOCK_CPO2.WEIGHT*STOCK_CPO2.FFA)/(STOCK_CPO1.WEIGHT+STOCK_CPO2.WEIGHT) AS FFA_STOCK, DISPATCH_CPO.WEIGHT AS DISPATCH_CPO, 
(SELECT SUM(d.WEIGHT) FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND d.DISPATCH_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND d.COMPANY_CODE='".$company."') AS DISPATCH_CPO_SHI,
STOCK_CPO1.WEIGHT AS STOCK_CPO1, STOCK_CPO2.WEIGHT AS STOCK_CPO2, 
(SELECT SUM(str.WEIGHT) FROM s_ba_storage_stock str LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='CPO' AND str.STRG_STOCK_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND str.COMPANY_CODE='".$company."') AS STOCK_CPO_SHI, PROD_KERNEL.WEIGHT AS KERNEL_PROD, 
(SELECT SUM(p.WEIGHT) FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND p.PRODUCTION_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND p.COMPANY_CODE='".$company."') AS KERNEL_PROD_SHI, 0 AS ER_KERNEL, 0 AS ER_KERNEL_SHI,
DISPATCH_KERNEL.WEIGHT AS DISPATCH_KERNEL, 
(SELECT SUM(d.WEIGHT) FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND d.DISPATCH_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND d.COMPANY_CODE='".$company."') AS DISPATCH_KERNEL_SHI, STOCK_KERNEL1.WEIGHT AS STOCK_KERNEL1, STOCK_KERNEL2.WEIGHT AS STOCK_KERNEL2, ba.QC, ba.LABOR, ba.MILL_MANAGER, ba.KTU, ba.ADMINISTRATUR 
FROM s_ba ba
LEFT JOIN (
	SELECT d.ID_BA, d.WEIGHT FROM s_ba_dispatch d
	LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS
	WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND DATE_FORMAT(d.DISPATCH_DATE,'%Y%m')='".$period."' AND d.COMPANY_CODE='".$company."'
) DISPATCH_CPO ON ba.ID_BA = DISPATCH_CPO.ID_BA
LEFT JOIN (
	SELECT d.ID_BA, d.WEIGHT FROM s_ba_dispatch d
	LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS
	WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND DATE_FORMAT(d.DISPATCH_DATE,'%Y%m')='".$period."' AND d.COMPANY_CODE='".$company."' 
	) DISPATCH_KERNEL ON ba.ID_BA = DISPATCH_KERNEL.ID_BA
LEFT JOIN(
	SELECT p.ID_BA, p.WEIGHT, p.FFA 
	FROM s_ba_production p
	LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS
	WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND DATE_FORMAT(p.PRODUCTION_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."' 
	) PROD_CPO ON ba.ID_BA = PROD_CPO.ID_BA
LEFT JOIN(
	SELECT p.ID_BA, p.WEIGHT 
	FROM s_ba_production p
	LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS
	WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND DATE_FORMAT(p.PRODUCTION_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."' 
	) PROD_KERNEL ON ba.ID_BA = PROD_KERNEL.ID_BA
LEFT JOIN(
	SELECT str.ID_BA, str.WEIGHT, str.FFA 
	FROM s_ba_storage_stock str
	LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE
	WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='CPO' AND SUBSTRING(s.ID_STORAGE,-1) = 1 AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."'
) STOCK_CPO1 ON ba.ID_BA = STOCK_CPO1.ID_BA
LEFT JOIN(
	SELECT str.ID_BA, str.WEIGHT, str.FFA 
	FROM s_ba_storage_stock str
	LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE
	WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='CPO' AND SUBSTRING(s.ID_STORAGE,-1) = 2
	AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."'
) STOCK_CPO2 ON ba.ID_BA = STOCK_CPO2.ID_BA
LEFT JOIN(
	SELECT str.ID_BA, str.WEIGHT, str.FFA 
	FROM s_ba_storage_stock str
	LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE
	WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='KERNEL' AND SUBSTRING(s.ID_STORAGE,-1) = 1
	AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."'
) STOCK_KERNEL1 ON ba.ID_BA = STOCK_KERNEL1.ID_BA
LEFT JOIN(
	SELECT str.ID_BA, str.WEIGHT, str.FFA 
	FROM s_ba_storage_stock str
	LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE
	WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='KERNEL' AND SUBSTRING(s.ID_STORAGE,-1) = 2
	AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."'
) STOCK_KERNEL2 ON ba.ID_BA = STOCK_KERNEL2.ID_BA
WHERE ba.ACTIVE = 1 AND ba.COMPANY_CODE='".$company."' AND DATE_FORMAT(ba.BA_DATE,'%Y%m')='".$period."'
ORDER BY ba.BA_DATE";
		
        $sQuery = $this->db->query($query);
		$numrows = $sQuery->num_rows();
        if ($numrows > 0){
        	$temp = $sQuery->row_array();
            $temp_result = array(); 
            foreach ( $sQuery->result_array() as $row )
            {
                $temp_result [] = $row;
                
            }
		}else{
			$temp_result = NULL;	
		}
        
        //$row=array();
        //if($sQuery==true){
        //    $row = $sQuery->row();   
        //}
        //return $row;  
		return $temp_result;
    }
	
	function get_ba_xls($company, $period, $f_day){
		$query="SELECT ba.BA_DATE, 
ba.FFB_INTI,
(SELECT SUM(b.FFB_INTI) AS FFB_INTI_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE  AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS FFB_INTI_SHI, 
ba.FFB_PLASMA,
(SELECT SUM(b.FFB_PLASMA) AS FFB_PLASMA_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS FFB_PLASMA_SHI, 
ba.FFB_SUPPLIER,
(SELECT SUM(b.FFB_SUPPLIER) AS FFB_SUPPLIER_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS FFB_SUPPLIER_SHI, 
ba.FFB_GROUP,
(SELECT SUM(b.FFB_GROUP) AS FFB_GROUP_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS FFB_GROUP_SHI,
(ba.FFB_INTI+ ba.FFB_PLASMA + ba.FFB_SUPPLIER + ba.FFB_GROUP ) AS TOTAL_FFB, 
(SELECT SUM(b.FFB_INTI) + SUM(b.FFB_PLASMA) + SUM(b.FFB_SUPPLIER) + SUM(b.FFB_GROUP) AS FFB_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS TOTAL_FFB_SHI, 
ba.FFB_PROCESSED, 
(SELECT SUM(b.FFB_PROCESSED) AS FFB_SHI FROM s_ba b WHERE b.BA_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND b.ACTIVE=1 AND b.COMPANY_CODE='".$company."') AS FFB_PROCESSED_SHI, 
((ba.BALANCE_YESTERDAY + ba.FFB_INTI+ ba.FFB_PLASMA + ba.FFB_SUPPLIER + ba.FFB_GROUP ) - ba.FFB_PROCESSED) AS BALANCE_TODAY, 
ba.BALANCE_YESTERDAY AS BALANCE_YESTERDAY, 
ba.PROCESSED_HOUR AS PROCESSED_HOUR,
ba.THROUGHPUT AS THROUGHPUT,
ba.MILL_UTILIZATION AS MILL_UTILIZATION,
ba.CAGE_WEIGHT AS CAGE_WEIGHT,
PROD_CPO.WEIGHT AS CPO_PROD, 
(SELECT SUM(p.WEIGHT) FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND p.PRODUCTION_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND p.COMPANY_CODE='".$company."') AS CPO_PROD_SHI, 
0 AS ER_CPO, 
0 AS ER_CPO_SHI, 
PROD_CPO.FFA AS FFA_PROD, 
(STOCK_CPO1.WEIGHT*STOCK_CPO1.FFA+STOCK_CPO2.WEIGHT*STOCK_CPO2.FFA)/(STOCK_CPO1.WEIGHT+STOCK_CPO2.WEIGHT) AS FFA_STOCK, 
DISPATCH_CPO.WEIGHT AS DISPATCH_CPO, 
(SELECT SUM(d.WEIGHT) FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND d.DISPATCH_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND d.COMPANY_CODE='".$company."') AS DISPATCH_CPO_SHI, 
STOCK_CPO1.WEIGHT AS STOCK_CPO1, 
STOCK_CPO2.WEIGHT AS STOCK_CPO2, 
STOCK_CPO3.WEIGHT AS STOCK_CPO3, 
(STOCK_CPO1.WEIGHT + STOCK_CPO2.WEIGHT + STOCK_CPO3.WEIGHT ) AS STOCK_CPO,
(SELECT SUM(str.WEIGHT) FROM s_ba_storage_stock str LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='CPO' AND str.STRG_STOCK_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND str.COMPANY_CODE='".$company."') AS STOCK_CPO_SHI, 
PROD_KERNEL.WEIGHT AS KERNEL_PROD, 
(SELECT SUM(p.WEIGHT) FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND p.PRODUCTION_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND p.COMPANY_CODE='".$company."') AS KERNEL_PROD_SHI, 
0 AS ER_KERNEL, 
0 AS ER_KERNEL_SHI, 
DISPATCH_KERNEL.WEIGHT AS DISPATCH_KERNEL, 
(SELECT SUM(d.WEIGHT) FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND d.DISPATCH_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND d.COMPANY_CODE='".$company."') AS DISPATCH_KERNEL_SHI, 
STOCK_KERNEL1.WEIGHT AS STOCK_KERNEL1, 
STOCK_KERNEL2.WEIGHT AS STOCK_KERNEL2, 
(STOCK_KERNEL1.WEIGHT+STOCK_KERNEL2.WEIGHT) AS STOCK_KERNEL,
PROD_SHELL.WEIGHT AS SHELL_PROD,
(SELECT SUM(p.WEIGHT) FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'CKG' AND p.PRODUCTION_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND p.COMPANY_CODE='".$company."') AS SHELL_PROD_SHI, 
0 AS SHELL_ER,
0 AS SHELL_ER_SHI,
PROD_EMPTY_BUNCH.WEIGHT AS EMPTY_BUNCH_PROD,
(SELECT SUM(p.WEIGHT) FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'TNK' AND p.PRODUCTION_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND p.COMPANY_CODE='".$company."') AS EMPTY_BUNCH_PROD_SHI, 
0 AS EMPTY_BUNCH_ER,
0 AS EMPTY_BUNCH_ER_SHI,
PROD_ABU.WEIGHT AS ABU_PROD,
(SELECT SUM(p.WEIGHT) FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'ABJ' AND p.PRODUCTION_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND p.COMPANY_CODE='".$company."') AS ABU_PROD_SHI, 
0 AS ABU_ER,
0 AS ABU_ER_SHI,
DISPATCH_SHELL.WEIGHT AS DISPATCH_SHELL, 
(SELECT SUM(d.WEIGHT) FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'CKG' AND d.DISPATCH_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND d.COMPANY_CODE='".$company."') AS DISPATCH_SHELL_SHI, 
DISPATCH_EMPTY_BUNCH.WEIGHT AS DISPATCH_EMPTY_BUNCH, 
(SELECT SUM(d.WEIGHT) FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'TNK' AND d.DISPATCH_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND d.COMPANY_CODE='".$company."') AS DISPATCH_EMPTY_BUNCH_SHI,
DISPATCH_ABU.WEIGHT AS DISPATCH_ABU, 
(SELECT SUM(d.WEIGHT) FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'ABJ' AND d.DISPATCH_DATE BETWEEN '".$f_day."' AND ba.BA_DATE AND d.COMPANY_CODE='".$company."') AS DISPATCH_ABU_SHI,
STOCK_SHELL.WEIGHT AS STOCK_SHELL,
STOCK_EMPTY_BUNCH.WEIGHT AS STOCK_EMPTY_BUNCH,
STOCK_ABU.WEIGHT AS STOCK_ABU,
ba.BUAH_MENTAH AS BUAH_MENTAH,
ba.BUAH_BUSUK AS BUAH_BUSUK,
ba.TANGKAI AS TANGKAI,
ba.JJK AS JJK,
ba.BRONDOLAN AS BRONDOLAN,
ba.QC, ba.LABOR, 
ba.MILL_MANAGER, 
ba.KTU, 
ba.ADMINISTRATUR 
FROM s_ba ba 
	LEFT JOIN ( SELECT d.ID_BA, d.WEIGHT FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND DATE_FORMAT(d.DISPATCH_DATE,'%Y%m')='".$period."' AND d.COMPANY_CODE='".$company."') DISPATCH_CPO ON ba.ID_BA = DISPATCH_CPO.ID_BA 
	LEFT JOIN ( SELECT d.ID_BA, d.WEIGHT FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND DATE_FORMAT(d.DISPATCH_DATE,'%Y%m')='".$period."' AND d.COMPANY_CODE='".$company."') DISPATCH_KERNEL ON ba.ID_BA = DISPATCH_KERNEL.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT, p.FFA FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'CPO' AND DATE_FORMAT(p.PRODUCTION_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') PROD_CPO ON ba.ID_BA = PROD_CPO.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'KRN' AND DATE_FORMAT(p.PRODUCTION_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') PROD_KERNEL ON ba.ID_BA = PROD_KERNEL.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'CKG' AND DATE_FORMAT(p.PRODUCTION_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') PROD_SHELL ON ba.ID_BA = PROD_SHELL.ID_BA 
	LEFT JOIN( SELECT str.ID_BA, str.WEIGHT, str.FFA FROM s_ba_storage_stock str LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='CPO' AND SUBSTRING(s.ID_STORAGE,-1) = 1 AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."') STOCK_CPO1 ON ba.ID_BA = STOCK_CPO1.ID_BA 
	LEFT JOIN( SELECT str.ID_BA, str.WEIGHT, str.FFA FROM s_ba_storage_stock str LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='CPO' AND SUBSTRING(s.ID_STORAGE,-1) = 2 AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."') STOCK_CPO2 ON ba.ID_BA = STOCK_CPO2.ID_BA 
	LEFT JOIN( SELECT str.ID_BA, str.WEIGHT, str.FFA FROM s_ba_storage_stock str LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='CPO' AND SUBSTRING(s.ID_STORAGE,-1) = 3 AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."') STOCK_CPO3 ON ba.ID_BA = STOCK_CPO3.ID_BA 
	LEFT JOIN( SELECT str.ID_BA, str.WEIGHT, str.FFA FROM s_ba_storage_stock str LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='KERNEL' AND SUBSTRING(s.ID_STORAGE,-1) = 1 AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."') STOCK_KERNEL1 ON ba.ID_BA = STOCK_KERNEL1.ID_BA 
	LEFT JOIN( SELECT str.ID_BA, str.WEIGHT, str.FFA FROM s_ba_storage_stock str LEFT JOIN m_storage s ON str.ID_STORAGE = s.ID_STORAGE WHERE str.ACTIVE = 1 AND s.PRODUCT_CODE ='KERNEL' AND SUBSTRING(s.ID_STORAGE,-1) = 2 AND DATE_FORMAT(str.STRG_STOCK_DATE,'%Y%m')='".$period."' AND str.COMPANY_CODE='".$company."') STOCK_KERNEL2 ON ba.ID_BA = STOCK_KERNEL2.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT FROM s_ba_stock p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'CKG' AND DATE_FORMAT(p.STOCK_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') STOCK_SHELL ON ba.ID_BA = STOCK_SHELL.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT FROM s_ba_stock p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'TNK' AND DATE_FORMAT(p.STOCK_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') STOCK_EMPTY_BUNCH ON ba.ID_BA = STOCK_EMPTY_BUNCH.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT FROM s_ba_stock p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'ABJ' AND DATE_FORMAT(p.STOCK_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') STOCK_ABU ON ba.ID_BA = STOCK_ABU.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'TNK' AND DATE_FORMAT(p.PRODUCTION_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') PROD_EMPTY_BUNCH ON ba.ID_BA = PROD_EMPTY_BUNCH.ID_BA 
	LEFT JOIN( SELECT p.ID_BA, p.WEIGHT FROM s_ba_production p LEFT JOIN s_komoditas k ON p.ID_COMMODITY = k.ID_KOMODITAS WHERE p.ACTIVE= 1 AND k.KODE_JENIS = 'ABJ' AND DATE_FORMAT(p.PRODUCTION_DATE,'%Y%m')='".$period."' AND p.COMPANY_CODE='".$company."') PROD_ABU ON ba.ID_BA = PROD_ABU.ID_BA 
	LEFT JOIN ( SELECT d.ID_BA, d.WEIGHT FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'CKG' AND DATE_FORMAT(d.DISPATCH_DATE,'%Y%m')='".$period."' AND d.COMPANY_CODE='".$company."') DISPATCH_SHELL ON ba.ID_BA = DISPATCH_SHELL.ID_BA
	LEFT JOIN ( SELECT d.ID_BA, d.WEIGHT FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'TNK' AND DATE_FORMAT(d.DISPATCH_DATE,'%Y%m')='".$period."' AND d.COMPANY_CODE='".$company."') DISPATCH_EMPTY_BUNCH ON ba.ID_BA = DISPATCH_EMPTY_BUNCH.ID_BA
	LEFT JOIN ( SELECT d.ID_BA, d.WEIGHT FROM s_ba_dispatch d LEFT JOIN s_komoditas k ON d.ID_COMMODITY = k.ID_KOMODITAS WHERE d.ACTIVE= 1 AND k.KODE_JENIS = 'ABJ' AND DATE_FORMAT(d.DISPATCH_DATE,'%Y%m')='".$period."' AND d.COMPANY_CODE='".$company."') DISPATCH_ABU ON ba.ID_BA = DISPATCH_ABU.ID_BA
WHERE ba.ACTIVE = 1 AND ba.COMPANY_CODE='".$company."' AND DATE_FORMAT(ba.BA_DATE,'%Y%m')='".$period."'
ORDER BY ba.BA_DATE";

		//var_dump($query);
		$sQuery = $this->db->query($query);
		$numrows = $sQuery->num_rows();
        if ($numrows > 0){
        	$temp = $sQuery->row_array();
            $temp_result = array(); 
            foreach ( $sQuery->result_array() as $row )
            {
                $temp_result [] = $row;
                
            }
		}else{
			$temp_result = NULL;	
		}
        		//var_dump($temp_result);
		return $temp_result;
	}
	//end: reporting code
	function approve_ba($id_ba,$company, $ba_date){
        $id_ba = trim($this->db->escape_str($id_ba));
        $company = trim($this->db->escape_str($company));
		$ba_date = trim($this->db->escape_str($ba_date));
        $status=FALSE;
        
        if(empty($id_ba)){
            $status = "id_ba CANNOT BE NULL !!";
        }
        
        if(empty($company)) {
            $status = "COMPANY_CODE CANNOT BE NULL !!";
        }
        
        $cek_data_exist = $this->cek_data_exist('s_ba',array('ID_BA'=>$id_ba,'BA_DATE'=>$ba_date),'ID_BA');
        if ($cek_data_exist <= 0){
            $status ="DATA NOT EXIST !!";
        }
        
        if(empty($status) || $status==FALSE){            
            $this->db->where('ID_BA',$id_ba);
			$this->db->where('BA_DATE',$ba_date);
            $this->db->where('COMPANY_CODE',$company);
            $set = array('APPROVED_BY'=>trim(htmlentities($this->session->userdata('LOGINID'),ENT_QUOTES,'UTF-8')),
                    'APPROVED_TIME' =>  $this->global_func->gen_datetime(),
                    'STATUS'=>1
                    );
            $this->db->set($set);
            $this->db->update( 's_ba');   
			$status="Approve berita acara tanggal " . $ba_date .  " berhasil"."\n";  
        }
        
        return $status;
    } 
}
?>
